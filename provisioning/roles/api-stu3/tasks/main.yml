---
- name: "download the api_stu3 webapp"
  tags: [smart-platform]
  become_user: "{{hosting_username}}"
  include: "roles/common/tasks/download-maven-artifact.yml"
  vars:
    group_id: "{{api_stu3_server_artifact_group_id}}"
    artifact_id: "{{api_stu3_server_artifact_artifact_id}}"
    version: "{{api_stu3_server_artifact_version}}"
    packaging: "{{api_stu3_server_artifact_packaging}}"

- name: "create the service directory"
  tags: [smart-platform]
  become_user: "{{hosting_username}}"
  file: "path={{item}} state=directory"
  with_items:
    - "{{hosting_user_home}}/api_stu3"

- name: "copy to the service directory"
  tags: [smart-platform]
  become_user: "{{hosting_username}}"
  copy:
    src: "{{api_stu3_server_artifact_location}}"
    dest: "{{hosting_user_home}}/api_stu3"
    remote_src: True

- name: "drop the api_stu3 database"
  tags: [smart-platform]
  mysql_db: name={{api_stu3_server_database}} state=absent

- name: "create the {{api_stu3_server_database}} database"
  tags: [smart-platform]
  mysql_db: name={{api_stu3_server_database}} state=present

# configure nginx
- name: "configure nginx (api_stu3)"
  tags: [smart-platform]
  template: src=api_stu3.j2 dest=/etc/nginx/sites-enabled/api_stu3 owner=root group=root mode=0644
  notify:
    - restart nginx

# configure the api_stu3 service
- name: "configure api_stu3 service"
  tags: [smart-platform]
  template: src=api_stu3.service.j2
            dest=/etc/systemd/system/api_stu3.service
            owner=root group=root mode=0644

- name: "enable api_stu3 service"
  tags: [smart-platform]
  shell: systemctl enable api_stu3.service

- name: "reload systemd daemon"
  tags: [smart-platform]
  shell: systemctl daemon-reload

- name: "restart api_stu3"
  tags: [smart-platform]
  service: name=api_stu3 state=restarted

- meta: flush_handlers

- name: "verify api_stu3 is available"
  tags: [smart-platform]
  become_user: "{{hosting_username}}"
  wait_for: host={{api_stu3_server_host}} port={{api_stu3_server_external_port}}

- meta: flush_handlers

# SMART production only
- name: drop sandbox snapshot
  include: roles/common/tasks/snapshot-command.yml
  tags: [smart-production]
  vars:
    sandbox_url: "{{api_stu3_server_url}}"
    snapshot_name: "{{api_stu3_baseline_snapshot}}"
    snapshot_action: Delete

# load the starter data
#- name: "initialize sandbox at {{api_stu3_server_default_sandbox_url}}/sandbox"
#  tags: [smart-platform]
#  uri:
#    url: "{{api_stu3_server_default_sandbox_url}}/sandbox"
#    method: PUT
#    body: "{ 'teamId': '{{api_stu3_server_sandbox}}','schemaVersion': '{{api_stu3_schema_version}}','allowOpenAccess': true,'baselineDate': '{{ ansible_date_time.year }}-{{ ansible_date_time.month }}-{{ ansible_date_time.day }}' }"
#    body_format: json
#    HEADER_Content-Type: "application/json"

# Until the python sample patients support STU3, just use the HSPC Starter Data

#- name: checkout api-dstu2-sample patients
#  tags: [smart-platform]
#  become_user: "{{hosting_username}}"
#  git: repo={{api_stu3_sample_patients_repo}}
#       version={{api_stu3_sample_patients_branch}}
#       dest={{hosting_user_home}}/api-dstu2-sample-patients
#       update={{update_repositories}}
#       force=yes
#       depth=1
#  register: api_stu3_sample_patients_checkout
#
#- name: build api-dstu2-sample patients
#  tags: [smart-platform]
#  become_user: "{{hosting_username}}"
#  shell: chdir={{hosting_user_home}}/api-dstu2-sample-patients/bin
#         python generate.py --write-fhir ../generated-data {{api_stu3_sample_patients_generator_params}}
#
#- name: list api-dstu2-sample patients
#  tags: [smart-platform]
#  shell: ls {{hosting_user_home}}/api-dstu2-sample-patients/generated-data/*.xml | head -n {{api_stu3_sample_patients_limit}}
#  register: api_stu3_sample_patient_files
#
#- name: load api-dstu2-sample patients
#  tags: [smart-platform]
#  shell: "chdir={{hosting_user_home}}/api-dstu2-sample-patients/generated-data/
#         curl
#           '{{api_stu3_server_internal_smart_sandbox_open_fhir_root_url}}/?'
#           -H 'Content-Type: application/xml+fhir'
#           --data-binary @{{item}}"
#  with_items: "{{api_stu3_sample_patient_files.stdout_lines}}"
#
#- name: list custom patients (json)
#  tags: [smart-platform]
#  shell: ls {{hosting_user_home}}/api-dstu2-sample-patients/custom-data/*.json
#  register: api_stu3_custom_patient_files_json
#
#- name: load custom patients (json)
#  tags: [smart-platform]
#  shell: "chdir={{hosting_user_home}}/api-dstu2-sample-patients/custom-data/
#         curl
#           '{{api_stu3_server_internal_smart_sandbox_open_fhir_root_url}}/?'
#           -H 'Content-Type: application/json+fhir'
#           --data-binary @{{item}}"
#  with_items: "{{api_stu3_custom_patient_files_json.stdout_lines}}"

# SMART production only
- name: "take baseline snapshot"
  include: roles/common/tasks/snapshot-command.yml
  tags: [smart-production]
  vars:
    sandbox_url: "{{api_stu3_server_default_sandbox_url}}"
    snapshot_name: "{{api_stu3_baseline_snapshot}}"
    snapshot_action: Take

# custom-sample-data is loaded nightly after the snapshot is restored
# checkout the project but don't build it
#- name: checkout api-dstu2-custom-sample-data
#  tags: [smart-platform]
#  become_user: "{{hosting_username}}"
#  git: repo={{api_stu3_custom_sample_data_repo}}
#       version={{api_stu3_custom_sample_data_branch}}
#       dest={{hosting_user_home}}/api-dstu2-custom-sample-data
#       update={{update_repositories}}
#       force=yes
#       depth=1

# SMART production only
- name: "create script restore-baseline-snapshot-stu3.sh"
  tags: [smart-production]
  become_user: "{{hosting_username}}"
  template: src=restore-baseline-snapshot-stu3.sh.j2
            dest={{user_scripts_home}}/restore-baseline-snapshot-stu3.sh
            mode=0755

# SMART production only
- name: "create script reset-database-job.sh"
  tags: [smart-production]
  become_user: "{{hosting_username}}"
  template: src=reset-database-job.sh.j2
            dest={{user_scripts_home}}/reset-database-job.sh
            mode=0755

# SMART production only
# create a cron job for nightly reset to be run at 5 AM UTC, or midnight US-EST
- name: "create cron job to nightly reset the api database"
  tags: [smart-production]
  become_user: "{{hosting_username}}"
  cron:
    name: "reset api_stu3 database"
    minute: "0"
    hour: "5"
    job: "{{user_scripts_home}}/reset-database-job.sh >> {{user_jobs_output_home}}/nightly-reset.log"

# Persona server
- name: "create the service directory"
  tags: [smart-platform]
  become_user: "{{hosting_username}}"
  file: "path={{item}} state=directory"
  with_items:
    - "{{hosting_user_home}}/persona_api_stu3"

- name: "copy to the service directory"
  tags: [smart-platform]
  become_user: "{{hosting_username}}"
  copy:
    src: "{{api_stu3_server_artifact_location}}"
    dest: "{{hosting_user_home}}/persona_api_stu3"
    remote_src: True

# configure nginx
- name: "configure nginx (persona_api_stu3)"
  tags: [smart-platform]
  template: src=persona_api_stu3.j2 dest=/etc/nginx/sites-enabled/persona_api_stu3 owner=root group=root mode=0644
  notify:
    - restart nginx

# configure the persona_api_stu3 service
- name: "configure persona_api_stu3 service"
  tags: [smart-platform]
  template: src=persona_api_stu3.service.j2
            dest=/etc/systemd/system/persona_api_stu3.service
            owner=root group=root mode=0644

- name: "enable persona_api_stu3 service"
  tags: [smart-platform]
  shell: systemctl enable persona_api_stu3.service

- name: "reload systemd daemon"
  tags: [smart-platform]
  shell: systemctl daemon-reload

- name: "restart persona_api_stu3"
  tags: [smart-platform]
  service: name=persona_api_stu3 state=restarted

- meta: flush_handlers

- name: "verify persona_api_stu3 is available"
  tags: [smart-platform]
  become_user: "{{hosting_username}}"
  wait_for: host={{persona_api_stu3_server_host}} port={{persona_api_stu3_server_external_port}}

- meta: flush_handlers

# Mock server
- name: "create the service directory"
  tags: [smart-platform]
  become_user: "{{hosting_username}}"
  file: "path={{item}} state=directory"
  with_items:
    - "{{hosting_user_home}}/mock_api_stu3"

- name: "copy to the service directory"
  tags: [smart-platform]
  become_user: "{{hosting_username}}"
  copy:
    src: "{{api_stu3_server_artifact_location}}"
    dest: "{{hosting_user_home}}/mock_api_stu3"
    remote_src: True

# configure nginx
- name: "configure nginx (mock_api_stu3)"
  tags: [smart-platform]
  template: src=mock_api_stu3.j2 dest=/etc/nginx/sites-enabled/mock_api_stu3 owner=root group=root mode=0644
  notify:
    - restart nginx

# configure the mock_api_stu3 service
- name: "configure mock_api_stu3 service"
  tags: [smart-platform]
  template: src=mock_api_stu3.service.j2
            dest=/etc/systemd/system/mock_api_stu3.service
            owner=root group=root mode=0644

- name: "enable mock_api_stu3 service"
  tags: [smart-platform]
  shell: systemctl enable mock_api_stu3.service

- name: "reload systemd daemon"
  tags: [smart-platform]
  shell: systemctl daemon-reload

- name: "restart mock_api_stu3"
  tags: [smart-platform]
  service: name=mock_api_stu3 state=restarted

- meta: flush_handlers

- name: "verify mock_api_stu3 is available"
  tags: [smart-platform]
  become_user: "{{hosting_username}}"
  wait_for: host={{mock_api_stu3_server_host}} port={{mock_api_stu3_server_external_port}}

- meta: flush_handlers



